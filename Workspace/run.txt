python3 odoo-bin --addons-path=addons/,/home/odoo/Desktop/hospital_management/Workspace/ --xmlrpc-port 9070 --db-filter v15_hospital_management_18082022 -u hospital_management

git key - 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
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
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
k4c2-yzxx-6dq9
source /usr/share/virtualenvwrapper/virtualenvwrapper.sh
v15_library_management

access_hospital,access_user_hospital,model_hospital_hospital,base.group_user,1,1,1,1
access_hospital_branch,access_user_hospital_branch,model_hospital_branch,base.group_user,1,1,1,1
access_hospital_speciality,access_user_hospital_speciality,model_hospital_speciality,base.group_user,1,1,1,1



@api.model
    def create(self,vals):
        res = super(HospitalPatient, self).create(vals)
        if vals.get('refdoctor_id', False):
            self.env['hospital.reference'].create({
                'name': "%s -> %s" % (res.name, res.doctor_id.name),
                'patient_id': res.id,
                'referer_id': vals.get('refdoctor_id', False),
                'refered_to_id': vals.get('doctor_id', False),
            })
        
        return res


    def write(self, vals):
        x = vals.get('x')
        if vals.get('refdoctor_id', False):
            old_refdoctor = self.refdoctor_id
            res = super(HospitalPatient, self).write(vals)

            if old_refdoctor:
                print("update relation of rec")
            else:
                self.env['hospital.reference'].create({
                    'name': "%s -> %s -> %s" % (self.refdoctor_id.name,self.doctor_id.name,self.name),
                    'patient_id': self.id,
                    'referer_id': self.refdoctor_id.id,
                    'refered_to_id': self.doctor_id.id,
                })
            return res
        else:
            return super(HospitalPatient, self).write(vals)

    def unlink(self):
        """Override method to unlink hospital references that is linked to patient"""
        for record in self:
            hospital_references = self.env['hospital.reference'].search([('patient_id','=',record.id)])
            print(hospital_references,"-------------hospital_references------\n\n")
            res = super(HospitalPatient,self).unlink()
            hospital_references.unlink()
            return res

    
    # ** Search **
    # hospital_references = self.env['hospital.reference'].search([('patient_id','=',record.id)],limit=4)
    # print(hospital_references,"---------without limit---------\n\n")
    # hospital_references = self.env['hospital.reference'].search([('patient_id','=',record.id)],limit=4,order='refered_to_id')
    # print(hospital_references,"-----------with limit-----------\n\n")

    # ** Browse **
    # hospital_references = self.env['hospital.reference'].search([('patient_id','=',record.id)]).ids
    # browse_hr = self.env['hospital.reference'].browse(hospital_references)
    # print(browse_hr.refered_to_id,"-----------browse_hr-------")
    # res = super(HospitalPatient,self).unlink()

@api.depends('patient_id')
    def _compute_all(self):
        for rec in self:
            rec.doctor_id = ""
            rec.gender = ""
            rec.phone_number = 0
            rec.age = 0
            rec.blood_group = ""
            rec.hospital_id = ""
            rec.branch_id = ""
            if rec.patient_id:
                rec.doctor_id = rec.patient_id.doctor_id
                rec.gender = rec.patient_id.gender
                rec.phone_number = rec.patient_id.phone_number
                rec.age = rec.patient_id.age
                rec.blood_group = rec.patient_id.blood_group
                rec.hospital_id = rec.patient_id.hospital_id
                rec.branch_id = rec.patient_id.branch_id